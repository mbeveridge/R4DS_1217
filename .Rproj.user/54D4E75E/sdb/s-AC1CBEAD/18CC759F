{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Chapter13\"\noutput:\n  github_document: default\n  html_notebook: default\n---\n\n```{r}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n\n\n## 13. \"Relational Data with dplyr\" [Chapter 10 hardcopy]\n### 13.2.1 Exercises\n\nQ1.\nImagine you wanted to draw (approximately) the route each plane flies from its origin to its destination.\nWhat variables would you need? What tables would you need to combine?\n\nA1.\norigin airport ---> destination airport. (This is just the endpoints, but assume it's what 'approximate route' meant)\n```{r}\nflights      # look at table to see the variables\n```\n\n`origin`, `dest` ...[`flights` table]\n`lat`, `lon` ...[`airports` table]\n\nCombine `flights` table (`origin`) with `airports` table (`faa`) to get lat&lon of origin airport\nCombine `flights` table (`dest`) with `airports` table (`faa`) to get lat&lon of destination airport\n\n-----------\n\nQ2.\nI forgot to draw the relationship between `weather` and `airports`.\nWhat is the relationship and how should it appear in the diagram?\n\nA2.\nSimilarly to Q1, `origin` (in `weather`) could match with `faa` (in `airports`)\n(As Q3 says, `weather` only contains data for the NYC airports, not for the destinations)\n\n-----------\n\nQ3.\n`weather` only contains information for the origin (NYC) airports.\nIf it contained weather records for all airports in the USA, what additional relation would it define with `flights`?\n\nA3.\nSimilarly to Q1, `origin` (in `weather`) could match with `origin` or `dest` (in `flights`) ...`dest` would be the additional part. \nBut to know weather for a flight, would also need to match a specific `year`, `month`, `day`, `hour` (and the ease of that may vary depending on frequency/accuracy of readings)\n\n-----------\n\nQ4.\nWe know that some days of the year are “special”, and fewer people than usual fly on them.\n\n* How might you represent that data as a data frame? What would be the primary keys of that table?\n* How would it connect to the existing tables?\n\nA4.\nInference is that these 'special' days would be in a new dataframe/ table. They might be on different dates each year.\n\n* So `year`, `month`, `day` in the dataframe would combine for a primary key of `date`.\n* It would connect to `flights` via `year`, `month`, `day`\n\n\n----------\n\n13. \"Relational data\" [Chapter 10 hardcopy]\n13.3.1 Exercises\n\nQ1.\nAdd a surrogate key to `flights`\n\nA1.\n\"If a table lacks a primary key, it’s sometimes useful to add one with `mutate()` and `row_number()`. ... This is called a surrogate key\" -- s13.3 R4DS book\n\n```{r}\nflights %>%\n  mutate(flight_id = row_number())\n```\n\n-----------\n\nQ2.\nIdentify the keys in the following datasets\n\nQ2.1 `Lahman::Batting`\nQ2.2 `babynames::babynames`\nQ2.3 `nasaweather::atmos`\nQ2.4 `fueleconomy::vehicles`\nQ2.5 `ggplot2::diamonds`\n\n(You might need to install some packages and read some documentation.)\n\nA2.\nIn Anaconda, installed the package : **r-lahman**\n\n```{r}\nlibrary(Lahman)\n# library(babynames)               # No. Package wasn't in the Anaconda distribution\n# library(nasaweather)             # No. Package wasn't in the Anaconda distribution\n# library(fueleconomy)             # No. Package wasn't in the Anaconda distribution\n```\n\nA2.1\n```{r}\nLahman::Batting\n\nBatting %>%\n  count(playerID, yearID, stint) %>%\n  filter(n > 1)                    # 13876 rows if trying `playerID` as the key. 7157 with `(playerID, yearID)`\n```\nThe combined primary key is `(playerID, yearID, stint)`\n\nA2.2 -     # Package wasn't in the Anaconda distribution\nA2.3 -     # Package wasn't in the Anaconda distribution\nA2.4 -     # Package wasn't in the Anaconda distribution\n\nA2.5\n```{r}\nggplot2::diamonds\n```\nThere is no primary key here. From [https://jrnold.github.io/r4ds-exercise-solutions/relational-data.html#keys] we learn that \"Using all variables in the data frame, the number of distinct rows is less than the total number of rows, meaning no combination of variables uniquely identifies the observations\". (ie. Some rows are exactly the same as other rows.) We could create a surrogate key with `row_number()`, as in Q1\n\n-----------\n\nQ3.\nQ3.1 Draw a diagram illustrating the connections between the `Batting`, `Master`, and `Salaries` tables in the **Lahman** package.\nQ3.2 Draw another diagram that shows the relationship between `Master`, `Managers`, `AwardsManagers`.\nQ3.3 How would you characterise the relationship between the `Batting`, `Pitching`, and `Fielding` tables?\n\nA3.\nA3.1\n```{r}\nBatting                                 # Primary key is `(playerID, yearID, stint)` ...[from A2.1]\nMaster                                  # Primary key is `playerID`\nSalaries\n\nSalaries %>%\n  count(yearID, teamID, playerID) %>%   # Primary key is `(yearID, teamID, playerID)`\n  filter (n > 1)\n```\n\nMaster$playerID matches with Batting$playerID ...(1:Many)\nMaster$playerID matches with Salaries$playerID ...(1:Many)\n\nA3.2 [reminder : \"relationship between `Master`, `Managers`, `AwardsManagers`\"] :\n```{r}\n?Lahman\n\nMaster                                  # Primary key is `playerID` ...[from A3.1]\nManagers                                # Primary key is `(yearID, teamID, inseason)`\nAwardsManagers                          # Primary key is `(playerID, yearID, awardID)`\n\n\nManagers %>%\n  count(yearID, teamID, inseason) %>%\n  filter(n >1)\n# `inseason` : \"Managerial order. Zero if the individual managed the team the entire year. Otherwise denotes where the manager appeared in the managerial order (1 for first manager, 2 for second, etc.)\" -- Help. ...`inseason` is needed in the primary key, because a `playerID` might have managed the same team more than once in a year (eg. 1st & 3rd), but `playerID` is then NOT needed\n\nAwardsManagers %>%\n  count(playerID, yearID, awardID) %>%\n  filter (n > 1)\n```\n\nMaster$playerID matches with Managers$playerID ...(1:Many)\nMaster$playerID matches with AwardsManagers$playerID ...(1:Many)\n\nA3.3 [reminder : \"relationship between the `Batting`, `Pitching`, and `Fielding` tables?\"] :\n\"[These] tables all have a primary key consisting of the `playerID`, `yearID`, and `stint` variables. They all have a 1-1 relationship to each other\" -- https://jrnold.github.io/r4ds-exercise-solutions/relational-data.html#keys\n\n\n----------\n\n13. \"Relational data\" [Chapter 10 hardcopy]\n13.4.6 Exercises\n\nQ1.\nCompute the average delay by destination, then join on the `airports` data frame so you can show the spatial distribution of delays. Here’s an easy way to draw a map of the United States:\n```{r}\nairports %>%\n  semi_join(flights, c(\"faa\" = \"dest\")) %>%\n  ggplot(aes(lon, lat)) +\n  borders(\"state\") +\n  geom_point() +\n  coord_quickmap()\n```\n\n(Don’t worry if you don’t understand what `semi_join()` does — you’ll learn about it next.)\nYou might want to use the `size` or `color` of the points to display the average delay for each airport\n\nA1.\n[Didn't work when I named the variable `avg-delay` instead of `avg_delay` ...because '-' isn't a valid character in a variable, in case it got confused with a minus sign between variables named `avg` and `delay`] :\n```{r}\naverage_delay <- flights %>%                                  # allocated to variable, to use in `ggplot()` 'blob'\n  group_by(dest) %>%                                          # `group_by()` in order to then take the group average\n  summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%    # Choose to exclude `NA`s from the average\n  left_join(airports, by = c(\"dest\" = \"faa\"))                 # Join using flight destination, not flight origin\n\naverage_delay\n```\n\nThis next part is based on the code in Q1, but also colours each airport (by `avg_delay`) :\n```{r}\nggplot(average_delay, aes(lon, lat, colour = avg_delay)) +\n  borders(\"state\") +\n  geom_point() +\n  coord_quickmap()\n```\n\n\"The left join should be your default join: use it unless you have a strong reason to prefer one of the others\" -- s13.4.3 R4DS book\n\"Warning message: Removed 4 rows containing missing values (geom_point)\". So did I end up with the same plot I'd have got with `inner_join` (rather than `left_join`)?\n\n-----------\n\nQ2.\nAdd the location of the origin _and_ destination (i.e. the `lat` and `lon`) to `flights`\n\nA2.\nAnswer combines 2 pieces of example code at the end of s13.4.5. Looks as if it worked, but is it the right way?\n...(ie. one after the other in the 'and then' pipe, rather than some sort of parallel? ...if that is even possible)\n```{r}\nflights %>%\n  left_join(airports, by = c(origin = \"faa\")) %>%  # Looks like the join used in A1\n  left_join(airports, by = c(dest = \"faa\")) %>%    # `airports` table doesn't distinguish between origin&destination\nView()\n```\n\nThere are name duplications from the 2 joins, but each has a suffix (assume .x is `origin` and .y is `dest`)\n...re. \"disambiguated in the output with a suffix\" (s13.4.5 R4DS book, where 2 tables each had same name for different variable)\n\n-----------\n\nQ3.\nIs there a relationship between the age of a plane and its delays?\n\nA3.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ4. What weather conditions make it more likely to see a delay?\nA4.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ5.\nWhat happened on June 13 2013?\nDisplay the spatial pattern of delays, and then use Google to cross-reference with the weather\n\nA5.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n\n----------\n\n13. \"Relational data\" [Chapter 10 hardcopy]\n13.5.1 Exercises\n\nQ1.\nWhat does it mean for a flight to have a missing `tailnum`?\nWhat do the tail numbers that don’t have a matching record in planes have in common?\n(Hint: one variable explains ~90% of the problems.)\n\nA1.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ2.\nFilter `flights` to only show flights with planes that have flown at least 100 flights\n\nA2.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ3.\nCombine `fueleconomy::vehicles` and `fueleconomy::common` to find only the records for the most common models\n\nA3.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ4.\nFind the 48 hours (over the course of the whole year) that have the worst delays.\nCross-reference it with the weather data. Can you see any patterns?\n\nA4.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ5.\nWhat does `anti_join(flights, airports, by = c(\"dest\" = \"faa\"))` tell you?\nWhat does `anti_join(airports, flights, by = c(\"faa\" = \"dest\"))` tell you?\n\nA5.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n-----------\n\nQ6.\nYou might expect that there’s an implicit relationship between plane and airline, because each plane is flown by a single airline. Confirm or reject this hypothesis using the tools you’ve learned above\n\nA6.\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "created" : 1517942038461.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1018516415",
    "id" : "18CC759F",
    "lastKnownWriteTime" : 1518124738,
    "last_content_update" : 1518124741834,
    "path" : "~/Dropbox/repos/R4DS_1217/R4DS_Chapter13.Rmd",
    "project_path" : "R4DS_Chapter13.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}