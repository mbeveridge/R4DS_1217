filter(!is.na(air_time)) %>%
group_by(dest) %>%
mutate(med_time = median(air_time),                           # define `med_time`
fast = (air_time - med_time) / med_time) %>%           # define `fast`
arrange(fast) %>%
select(dest, origin, year, month, day, carrier, flight, air_time, med_time, fast) %>%
head(20)
flights %>%
filter(!is.na(air_time)) %>%                              # [same as for A6.1]
group_by(dest) %>%                                        # [same as for A6.1]
mutate(air_time_relative = air_time - min(air_time)) %>%  # define `air_time_relative` (relative to min, as ABS)
arrange(desc(air_time_relative)) %>%
select(dest, origin, year, month, day, carrier, flight, air_time, air_time_relative) %>%
head(20)
flights %>%                                       # 336,776 x 19
group_by(dest) %>%                              # 336,776 x 19
filter(n_distinct(carrier)>=2) %>%              # 325,397 x 19
group_by(carrier) %>%                           # 325,397 x 19. THIS group_by REPLACES the previous one (?)
summarise(carrier_dests = n_distinct(dest)) %>% # 16 x 2 ...carrier, carrier_dests
arrange(desc(carrier_dests))                    # 16 x 2 ...carrier, carrier_dests
flights %>%                                       # 336,776 x 19
group_by(dest) %>%                              # 336,776 x 19
filter(n_distinct(carrier)>=2) %>%              # 325,397 x 19
count(carrier) %>%                              # 285 x 3 ...dest, carrier, n. THIS did the job of a summarise() ?
group_by(carrier) %>%                           # 285 x 3 ...dest, carrier, n
count(sort = TRUE)                              # 16 x 2 ...carrier, nn
flights %>%
group_by(tailnum) %>%
mutate(row_num = row_number()) %>%
filter(arr_delay > 60) %>%
summarize(first_hour_delay = first(row_num) - 1)
flights %>%
arrange(tailnum, year, month, day) %>%
group_by(tailnum) %>%
mutate(delay_1hr = arr_delay > 60) %>%
mutate(before_1stdelay = cumsum(delay_1hr)) %>%
filter(before_1stdelay < 1) %>%
count(sort = TRUE)
flights %>%
mutate(dep_date = as.Date(time_hour)) %>%
group_by(tailnum) %>%
arrange(dep_date) %>%
filter(!cumany(arr_delay > 60)) %>%
tally(sort = TRUE)
ggplot(data = diamonds, mapping = aes(x = carat)) +
geom_histogram() +
xlim(0.5, 1.5)
ylim(1000, 2000)
?ylim
ggplot(data = diamonds, mapping = aes(x = carat)) +
geom_histogram() +
xlim(0.5, 15)
ylim(1000, 2000)                                           # Zooming-in to same place, without `coord_cartesian()`
ggplot(data = diamonds, mapping = aes(x = carat)) +
geom_histogram() +
xlim(0.5, 1.5)
ylim(1000, 2000)                                           # Zooming-in to same place, without `coord_cartesian()`
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 100000))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 10000))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 5000))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 1000))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 500))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram() +                                                        # histogram
coord_cartesian(ylim = c(0, 100))
ggplot(data = nycflights13::flights, mapping = aes(x = dep_delay)) +
geom_histogram()                                                        # histogram
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +    # Plotted each variable v's price. This is carat
geom_point() +
geom_smooth()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +    # Plotted each variable v's price. This is carat
geom_point() +
geom_smooth()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
?ggbeeswarm
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut, fill = n)) +
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
library(nycflights13)
nycflights13::flights %>%
group_by(month) %>%                   # without this, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month, dest) %>%                   # without this, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month) %>%                   # without both, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(dest) %>%                   # without both, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month) %>%                   # without both, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month, dest) %>%                   # without both, got respective 'object not found' errors from `aes()`
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month, dest) %>%                                # without both, got respective 'object not found' errors
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = month, y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
library(nycflights13)
nycflights13::flights %>%
group_by(month, dest) %>%                                # without both, got respective 'object not found' errors
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = factor(month), y = dest, fill = dep_delay)) +     # `factor(month)` for integers on axis
geom_tile()
ggplot(diamonds, aes(x = cut_number(carat, 10), y = price, colour = cut)) +
geom_boxplot()
print(mtcars)
print(as_tibble(mtcars))
df <- data.frame(abc = 1, xyz = "a")
df$x                                     # Q2.1
df[, "xyz"]                              # Q2.2
df[, c("abc", "xyz")]                    # Q2.3
library(tidyverse)
df <- data.frame(abc = 1, xyz = "a")
df$x                                     # Q2.1
df[, "xyz"]                              # Q2.2
df[, c("abc", "xyz")]                    # Q2.3
df <- data.frame(abc = 1, xyz = "a")
df$x                                     # Q2.1
df[, "xyz"]                              # Q2.2
df[, c("abc", "xyz")]                    # Q2.3
dftibb <- as_tibble(data.frame(abc = 1, xyz = "a"))
dftibb$x                                 # A2.1
dftibb[, "xyz"]                          # A2.2
dftibb[, c("abc", "xyz")]                # A2.3
dftibb <- as_tibble(data.frame(abc = 1, xyz = "a"))
dftibb$x                                 # A2.1
dftibb[, "xyz"]                          # A2.2
dftibb[, c("abc", "xyz")]                # A2.3
df <- data.frame(abc = 1, xyz = "a")
df$x                                     # Q2.1
df[, "xyz"]                              # Q2.2
df[, c("abc", "xyz")]                    # Q2.3
df <- data.frame(abc = 1, xyz = "a")
df$x                                     # Q2.1
df[, "xyz"]                              # Q2.2
df[, c("abc", "xyz")]                    # Q2.3
?tibble::enframe()
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying$`1`           # OK
annoying[[`1`]]        # not ok ...??
annoying$`1`           # OK
annoying$"1"           # OK ...?
annoying[["1"]]        # OK ...?
annoying[[`1`]]        # not ok ...??
annoying[["1"]]        # OK ...Why?
annoying[[`1`]]        # not ok ...Why??
annoying$`1`           # OK
ggplot(annoying, aes(`1`,`2`)) + geom_point()
ggplot(annoying, aes(`2`,`1`)) + geom_point()
(annoying %>% mutate(`3` = `2`/`1`))       # The above comment does NOT seem to apply here - I'm not subsetting
(annoying %>%
mutate(`3` = `2`/`1`) %>%
rename(one = `1`, two = `2`, three = `3`))
enframe(c(a = 1, b = 2, c = 3))
nycflights13::flights %>% print(n = 10, width = 80)    # `width` in characters (not qty of columns)
getOption("tibble.max_extra_cols")                     # Tells current value of `tibble.max_extra_cols`
options(tibble.max_extra_cols = 100)                   # Set to 100
parse_date(d1, "%B %d, %Y")                     # A7.1
d1 <- "January 1, 2010"                         # Q7.1
d2 <- "2015-Mar-07"                             # Q7.2
d3 <- "06-Jun-2017"                             # Q7.3
d4 <- c("August 19 (2015)", "July 1 (2015)")    # Q7.4
d5 <- "12/30/14" # Dec 30, 2014                 # Q7.5
t1 <- "1705"                                    # Q7.6
t2 <- "11:15:10.12 PM"                          # Q7.7
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
?locale
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
library(tidyverse)
?read_delim
read_delim(file, delim = "|")
library(tidyverse)
?read_delim
read_delim(file, delim = "|")
library(tidyverse)
library(tidyverse)
?read_delim
read_delim(file, delim = "|")
?read_delim
read_delim(file, delim = "|")
?read_csv
?read_tsv
? read_fwf
"x,y\n1,'a,b'"
?read_delim
Q4_string <- "x,y\n1,'a,b'"              # "`\n` is a convenient shortcut for adding a new line" -- s11.2 R4DS book
read_delim(file = Q4_string, delim = ",", quote = "'")
Q4_string <- "x,y\n1,'a,b'"              # "`\n` is a convenient shortcut for adding a new line" -- s11.2 R4DS book
read_delim(file = Q4_string, delim = ",", quote = "'")
read_csv("a,b\n1,2,3\n4,5,6")    # Q5.1
read_csv("a,b,c\n1,2\n1,2,3,4")  # Q5.2
read_csv("a,b\n\"1")             # Q5.3
read_csv("a,b\n1,2\na,b")        # Q5.4
read_csv("a;b\n1;3")             # Q5.5
?locale
locale(decimal_mark = ".", grouping_mark = ".")
locale(decimal_mark = ",")
locale(decimal_mark = ".")
?locale
locale(date_names = "en", date_format = "%d/%m/%y", time_format = "%AT",
decimal_mark = ".", grouping_mark = ",", tz = "UTC",
encoding = "UTF-8", asciify = FALSE)
d1 <- "January 1, 2010"                         # Q7.1
d2 <- "2015-Mar-07"                             # Q7.2
d3 <- "06-Jun-2017"                             # Q7.3
d4 <- c("August 19 (2015)", "July 1 (2015)")    # Q7.4
d5 <- "12/30/14" # Dec 30, 2014                 # Q7.5
t1 <- "1705"                                    # Q7.6
t2 <- "11:15:10.12 PM"                          # Q7.7
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
read_csv()
?read_csv
?read_tsv
?read_delim
?read_delim
`read_delim(file, delim = "|")`
?read_csv
?read_tsv
? read_fwf
?read_fwf
?locale
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
parse_date(d1, "%B %d, %Y")                     # A7.1
parse_date(d2, "%Y-%b-%d")                      # A7.2
parse_date(d3, "%d-%b-%Y")                      # A7.3
parse_date(d4, "%B %d (%Y)")                    # A7.4
parse_date(d5, "%m/%d/%y")                      # A7.5
parse_time(t1, "%H%M")                          # A7.6
parse_time(t2, "%I:%M:%OS %p")                  # A7.7
?table1
# Compute cases per year
table2_new %>%
count(year, wt = cases)
library(tidyverse)
?table1
cases <- table2 %>% filter(type == "cases")
population <- table2 %>% filter(type == "population")
rate <- cases / population # FAIL : "Error in FUN(left, right) : non-numeric argument to binary operator"
library(tidyverse)
?table1
# Compute cases per year
table2_new %>%
count(year, wt = cases)
cases <- filter(table2, type == "cases")$count
population <- filter(table2, type == "population")$count
country <- filter(table2, type == "cases")$country
year <- filter(table2, type == "cases")$year
table2_new <- tibble(country = country,
year = year,
cases = cases,
population = population,
rate = cases / population * 10000)
table2_new
# Compute cases per year
table2_new %>%
count(year, wt = cases)
# Visualise changes over time
ggplot(table2_new, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
library(tidyverse)
?table1
cases <- table2 %>% filter(type == "cases")
population <- table2 %>% filter(type == "population")
rate <- cases / population # FAIL : "Error in FUN(left, right) : non-numeric argument to binary operator"
library(tidyverse)
?table1
cases <- table2 %>% filter(type == "cases")
population <- table2 %>% filter(type == "population")
rate <- cases / population # FAIL : "Error in FUN(left, right) : non-numeric argument to binary operator"
cases <- filter(table2, type == "cases")$count
population <- filter(table2, type == "population")$count
country <- filter(table2, type == "cases")$country
year <- filter(table2, type == "cases")$year
table2_new <- tibble(country = country,
year = year,
cases = cases,
population = population,
rate = cases / population * 10000)
table2_new
table4_new <- tibble(country = table4a$country,
`1999` = table4a$`1999` / table4b$`1999` * 10000,
`2000` = table4a$`2000` / table4b$`2000` * 10000)
table4_new
table1 %>%
mutate(rate = cases / population * 10000)
# Compute cases per year
table2_new %>%
count(year, wt = cases)
# Visualise changes over time
ggplot(table2_new, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
table2 %>%
filter(type == "cases") %>%
ggplot(aes(year, count)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`, convert = TRUE)
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
spread(people, key = key, value = value)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
preg %>%
gather(male, female, key = "sex", value = "count") # I assume 'count' is 'baby_qty', but safer to leave as 'count'
# Compute cases per year
table2_new %>%
count(year, wt = cases)
table2 %>%
filter(type == "cases") %>%
ggplot(aes(year, count)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
cases <- filter(table2, type == "cases")$count               # 1.
library(tidyverse)
cases <- filter(table2, type == "cases")$count               # 1.
population <- filter(table2, type == "population")$count     # 2.
country <- filter(table2, type == "cases")$country
year <- filter(table2, type == "cases")$year
table2_new <- tibble(country = country,
year = year,
cases = cases,
population = population,
rate = cases / population * 10000)   # 3., 4.
table2_new
table4_new <- tibble(country = table4a$country,
`1999` = table4a$`1999` / table4b$`1999` * 10000,     # 3.
`2000` = table4a$`2000` / table4b$`2000` * 10000)     # 3., 4.
table4_new
table1 %>%
mutate(rate = cases / population * 10000)                  # 3.,4.
# Compute cases per year
table2_new %>%
count(year, wt = cases)
# Visualise changes over time
ggplot(table2_new, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
table2 %>%
filter(type == "cases") %>%
ggplot(aes(year, count)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
stocks %>%
spread(year, return) %>%
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))          # "Warning message: Too many values at 1 locations: 2". 3x3 tibble
?separate
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))          # "Warning message: Too few values at 1 locations: 2". 3x3 tibble
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge")  # extra values not split, so “f,g” is in col "three" row 2
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "left")    # col “one” has the <NA>, instead of col "three" (row 2)
?unite        # "If TRUE, remove input columns from output data frame"
?separate     # "If TRUE, remove input column from output data frame"
?unite
cases <- table2 %>% filter(type == "cases")                  # 1.
population <- table2 %>% filter(type == "population")        # 2.
rate <- cases / population                                   # 3.
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))          # "Warning message: Too many values at 1 locations: 2". 3x3 tibble
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))          # "Warning message: Too few values at 1 locations: 2". 3x3 tibble
?unite        # "If TRUE, remove input columns from output data frame" -- Help
?separate     # "If TRUE, remove input column  from output data frame" -- Help
?extract
?extract
?extract
?spread
?complete
?spread
?complete
?spread
?fill
